# =================================================================
# GeoData & PathNode
#
# Cell Pathfinding:
#
# - Definition: Cell pathfinding involves navigating through the game world based on a grid of cells. The world is divided into a grid, and characters move from one cell to another to reach their destination.
# - Implementation: The server or game engine uses algorithms to calculate the optimal path from one cell to another, taking into account obstacles and terrain features. A common algorithm used for this purpose is A* (A-star).
# - Advantages: Cell pathfinding can be computationally less intensive compared to more complex methods, making it suitable for real-time applications like games.
#
# Path Nodes:
#
# Definition: Path nodes refer to predefined points or markers in the game world that characters can follow to navigate from one location to another.
# - Implementation: Game developers manually place these nodes in the game world and define the connections between them. Characters then follow a predetermined path by moving from one node to the next.
# - Advantages: Path nodes provide a level of control and predictability over character movement. They can be strategically placed to guide characters through specific routes, ensuring they follow a desired path.
#
# Differences:
#
# - Flexibility: Cell pathfinding is more dynamic and adapts to the actual terrain and obstacles present in the game world. Path nodes, on the other hand, offer a more predefined and controlled approach to navigation.
# - Computational Complexity: Cell pathfinding algorithms may involve more complex calculations, especially in environments with dynamic obstacles. Path nodes, being predefined, may be computationally simpler but require manual setup.
# - Realism: Cell pathfinding tends to provide a more realistic navigation experience as characters respond dynamically to the game environment. Path nodes may feel more scripted but can be useful for guiding players through specific areas or creating set paths for non-player characters (NPCs).
# =================================================================

# Pathfinding options:
# 0 = Disabled
# 1 = Enabled using path node files
# 2 = Enabled using geodata cells at runtime
# Default: 0
PathFinding = 0

# Pathnode directory folder
PathnodeDirectory = ./data/pathnode

# Pathfinding array buffers configuration
PathFindBuffers = 100x6;128x6;192x6;256x4;320x4;384x4;500x2

# Weight for nodes without obstacles far from walls
LowWeight = 0.5

# Weight for nodes near walls
MediumWeight = 2

# Weight for nodes with obstacles
HighWeight = 3

# Angle paths will be more "smart", but in cost of higher CPU utilization
AdvancedDiagonalStrategy = True

# Weight for diagonal movement. Used only with AdvancedDiagonalStrategy = True
# Default: LowWeight * sqrt(2)
DiagonalWeight = 0.707

# Maximum number of LOS postfilter passes, 0 will disable postfilter.
# Default: 3
MaxPostfilterPasses = 3

# Path debug function.
# Nodes known to pathfinder will be displayed as adena, constructed path as antidots.
# Number of the items show node cost * 10
# Potions display path after first stage filter
# Red potions - actual waypoints. Green potions - nodes removed by LOS postfilter
# This function FOR DEBUG PURPOSES ONLY, never use it on the live server!
DebugPath = False

# True = Loads GeoData buffer's content into physical memory.
# False = Does not necessarily imply that the GeoData buffer's content is not resident in physical memory.
# Default: True
ForceGeodata = True

# This setting controls Client <--> Server Player coordinates synchronization:
# -1 - Will synchronize only Z from Client --> Server. Default when no geodata.
# 1 - Synchronization Client --> Server only. Using this option (without geodata) makes it more difficult for players to bypass obstacles.
# 2 - Intended for geodata (at least with cell-level pathfinding, otherwise you can also try -1).
# Server sends validation packet if client goes too far from server calculated coordinates.
CoordSynchronize = -1

# Geodata files folder
GeoDataPath = ./data/geodata

# True: Try to load regions not specified below(won't disturb server startup when file does not exist)
# False: Don't load any regions other than the ones specified with True below
TryLoadUnspecifiedRegions = True

# List of regions to be required to load
# eg.:
# Both regions required
# 22_22=True
# 19_20=true
# Exclude region from loading
# 25_26=false
# True: Region is required for the server to startup
# False: Region is not considered to be loaded